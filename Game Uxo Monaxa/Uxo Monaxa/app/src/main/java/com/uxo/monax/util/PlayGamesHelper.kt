package com.uxo.monax.util

import android.app.Activity
import com.google.android.gms.games.GamesSignInClient
import com.google.android.gms.games.LeaderboardsClient
import com.google.android.gms.games.PlayGames

class PlayGamesHelper(private val activity: Activity) {

    companion object {
        private val LEADERBOARD_ID = "CgkIkLnT8ZYDEAIQAQ"
    }

    private val gamesSignInClient: GamesSignInClient   = PlayGames.getGamesSignInClient(activity)
    private val leaderboardsClient: LeaderboardsClient = PlayGames.getLeaderboardsClient(activity)

    /** –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≥—Ä–∞–≤–µ—Ü—å —É–≤—ñ–π—à–æ–≤ —É Play Games */
    fun isAuthenticated(block: (Boolean) -> Unit) {
        gamesSignInClient.isAuthenticated().addOnCompleteListener { task ->
            val isSignedIn = task.isSuccessful && task.result.isAuthenticated
            block(isSignedIn)
        }
    }

    /** –ü—Ä–∏–º—É—Å–æ–≤–∏–π –≤—Ö—ñ–¥ —É Play Games */
    fun signIn(block: (() -> Unit)? = null) {
        gamesSignInClient.signIn().addOnCompleteListener { task ->
            if (task.isSuccessful && task.result.isAuthenticated) {
                block?.invoke() // ‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏, —è–∫—â–æ –≤—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π
            } else {
                log("Play Games: –í—Ö—ñ–¥ –Ω–µ –≤–¥–∞–≤—Å—è: ${task.exception?.message}")
            }
        }
    }

    /** –û—Ç—Ä–∏–º—É—î —ñ–º'—è –≥—Ä–∞–≤—Ü—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ UI) */
    fun getPlayerName(block: (String?) -> Unit) {
        isAuthenticated { isSignedIn ->
            if (isSignedIn) {
                PlayGames.getPlayersClient(activity)
                    .currentPlayer
                    .addOnSuccessListener { player -> block(player.displayName) }
                    .addOnFailureListener { exception ->
                        log("Play Games: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –≥—Ä–∞–≤—Ü—è: ${exception.message}")
                        block(null)
                    }
            } else {
                log("Play Games: –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
                block(null)
            }
        }
    }

    /** –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ—á–∫–∏ —É Leaderboard */
    fun submitScore(score: Long) {
        isAuthenticated { isSignedIn ->
            if (isSignedIn) {
                leaderboardsClient.submitScore(LEADERBOARD_ID, score)
                log("Play Games: –û—á–∫–∏ ($score) –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Leaderboard")
            } else {
                log("Play Games: –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –Ω–µ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –æ—á–∫–∏")
            }
        }
    }

    /** –í—ñ–¥–∫—Ä–∏–≤–∞—î Leaderboard */
    fun showLeaderboard() {
        isAuthenticated { isSignedIn ->
            if (isSignedIn) {
                leaderboardsClient.getLeaderboardIntent(LEADERBOARD_ID)
                    .addOnSuccessListener { intent -> activity.startActivityForResult(intent, 9004) }
                    .addOnFailureListener { exception ->
                        log("Play Games: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ Leaderboard: ${exception.message}")
                    }
            } else {
                log("Play Games: –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤—Ö—ñ–¥...")
                signIn { showLeaderboard() } // üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤—Ö—ñ–¥ —ñ –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è Leaderboard
            }
        }
    }
}
